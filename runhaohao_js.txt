  stack_size: 2
  opcodes:
;; function() {
;;         print("... hello\n");

        get_var print
        push_atom_value "... hello\n"
        call1 1

;;     }

        return_undef


  locals:
    0: var hfuncobj
  stack_size: 4
  opcodes:
;; function hfunc() {
;;     var hfuncobj = {owner:"hfunc"};

        object
        push_atom_value hfunc
        define_field owner
        put_loc0 0: hfuncobj

;;     print("...", hfuncobj.owner, "\n");

        get_var print
        push_atom_value "..."
        get_loc0 0: hfuncobj
        get_field owner
        push_atom_value "\n"
        call3 3
        drop

;;     print("... this is hfunc output.\n");

        get_var print
        push_atom_value "... this is hfunc output.\n"
        call1 1
        drop

;;     return 0;

        push_0 0
        return

;; }

  stack_size: 2
  opcodes:
;; function() {
;;         print("... this is main.internal().\n");

        get_var print
        push_atom_value "... this is main.internal().\n"
        call1 1

;;     }

        return_undef


  locals:
    0: var hmainobj
    1: var harray
    2: var hnewstring
    3: var hstring
  stack_size: 5
  opcodes:
;; function main() {
;;     var hmainobj = {owner:"main"};

        object
        push_atom_value main
        define_field owner
        put_loc0 0: hmainobj

;; 
;;     var harray = ["one", "two", "three", "four", "five"];

        push_atom_value one
        push_atom_value two
        push_atom_value three
        push_atom_value four
        push_atom_value five
        array_from 5
        put_loc1 1: harray

;;     
;;     var hnewstring = new String("hnewstring\n");

        get_var String
        dup
        push_atom_value "hnewstring\n"
        call_constructor 1
        put_loc2 2: hnewstring

;;     
;;     var hstring = "hstring\n";

        push_atom_value "hstring\n"
        put_loc3 3: hstring

;; 
;;     globalstring = "globalstring\n";

        push_atom_value "globalstring\n"
        dup
        put_var globalstring
        drop

;; 
;;     main.harray1 = ["six", "seven"];

        get_var main
        push_atom_value six
        push_atom_value seven
        array_from 2
        put_field harray1

;; 
;;     internal = function() {
;;         print("... this is main.internal().\n");
;;     }

        fclosure8 0: [bytecode <null>]
        set_name internal
        dup
        put_var internal
        drop

;; 
;;     print("...", hperson.name, "\n");

        get_var print
        push_atom_value "..."
        get_var hperson
        get_field name
        push_atom_value "\n"
        call3 3
        drop

;;     print("...", hperson.age, "\n");

        get_var print
        push_atom_value "..."
        get_var hperson
        get_field age
        push_atom_value "\n"
        call3 3
        drop

;;     hperson.sayhello();

        get_var hperson
        get_field2 sayhello
        call_method 0
        drop

;;     
;;     print("...", hmainobj.owner);

        get_var print
        push_atom_value "..."
        get_loc0 0: hmainobj
        get_field owner
        call2 2
        drop

;; 
;;     print("...", harray[0], harray[3], "\n");

        get_var print
        push_atom_value "..."
        get_loc1 1: harray
        push_0 0
        get_array_el
        get_loc1 1: harray
        push_3 3
        get_array_el
        push_atom_value "\n"
        call 4
        drop

;;     
;;     print("...", hnewstring);

        get_var print
        push_atom_value "..."
        get_loc2 2: hnewstring
        call2 2
        drop

;;     
;;     print("...", hstring);

        get_var print
        push_atom_value "..."
        get_loc3 3: hstring
        call2 2
        drop

;;     
;;     print("...", globalstring);

        get_var print
        push_atom_value "..."
        get_var globalstring
        call2 2
        drop

;; 
;;     hfunc();

        get_var hfunc
        call0 0

;; }

        return_undef


  closure vars:
    0: x local:arg0 var
    1: y local:arg1 var
  stack_size: 2
  opcodes:
;; function() {
;;         return "" + x + " " + y;

        push_empty_string
        get_var_ref0 0: x
        add
        push_atom_value " "
        add
        get_var_ref1 1: y
        add
        return

;;     }

  args: x y
  locals:
    0: var this
  stack_size: 2
  opcodes:
;; function BOX(x, y) {

        push_this
        put_loc0 0: this

;;     this.x = x;

        get_loc0 0: this
        get_arg0 0: x
        put_field x

;;     this.y = y;

        get_loc0 0: this
        get_arg1 1: y
        put_field y

;;     this.toString = function() {

        get_loc0 0: this

;;         return "" + x + " " + y;
;;     };

        fclosure8 0: [bytecode <null>]
        put_field toString

;; }

        return_undef


  locals:
    0: var <ret>
  stack_size: 4
  opcodes:
        check_define_var hperson,0
        check_define_var hfunc,64
        check_define_var main,64
        check_define_var BOX,64
        check_define_var box,0
        define_var hperson,0
        fclosure8 2: [bytecode hfunc]
        define_func hfunc,0
        fclosure8 3: [bytecode main]
        define_func main,0
        fclosure8 4: [bytecode BOX]
        define_func BOX,0
        define_var box,0
        object
        define_field name
        push_const8 0: 1"22"
        define_field age
        fclosure8 1: [bytecode <null>]
        set_name sayhello
        define_field sayhello
        dup
        put_var hperson
        drop
        get_var main
        call0 0
        put_loc0 0: "<ret>"
        get_var print
        get_var main
        get_field harray1
        call1 1
        put_loc0 0: "<ret>"
        get_var internal
        call0 0
        put_loc0 0: "<ret>"
        get_var BOX
        dup
        push_4 4
        push_5 5
        call_constructor 2
        dup
        put_var box
        drop
        get_var print
        get_var box
        get_field2 toString
        call_method 0
        call1 1
        set_loc0 0: "<ret>"
        return

zhang gc _count 1
JS_RunGC 1
zhang new OP_object 0xe6b82260 line 2
zhang OP_define_field 0xe6b82260 
zhang OP_define_field 0xe6b82260 
zhang OP_set_name 0xe6b822b0 
zhang OP_define_field 0xe6b82260 
zhang new OP_object 0xe6b811c0 line 17
zhang OP_define_field 0xe6b811c0 
zhang new OP_array_from 0xe6b81210 line 19
zhang new OP_array_from 0xe6b83ea0 line 27
zhang OP_put_field 0xe6b81b50 
zhang OP_set_name 0xe6b83ff0 
zhang OP_get_field 0xe6b82260 

zhang OP_get_field 0xe6b82260 
... 22 

zhang OP_get_field2 0xe6b82260 
... hello

zhang OP_get_field 0xe6b811c0 
... main
zhang OP_get_field 0xe6b80790 
zhang OP_get_field 0xe6b808c0 
... one four 

hnewstring

... hstring

... globalstring

zhang new OP_object 0xe6b840d0 line 10
zhang OP_define_field 0xe6b840d0 
zhang OP_get_field 0xe6b840d0 
... hfunc 

... this is hfunc output.

zhang OP_get_field 0xe6b81b50 
six,seven
... this is main.internal().

zhang OP_put_field 0xe6b811c0 
zhang OP_put_field 0xe6b811c0 
zhang OP_put_field 0xe6b811c0 
zhang OP_get_field2 0xe6b811c0 
4 5
zhang gc _count 2
JS_RunGC 2
JS_RunGC obj: 0x7fffe6b83ea0 line:27 flag:0
JS_RunGC obj: 0x7fffe6b81210 line:19 flag:0
